#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 18 11:54:44 2019

@author: kschen
"""

#% Input
#%   shape: 'raised cosine' or 'boxcar'
#%   duration: the time that needs to be covered
#%   nBases: number of basis vectors to fill the duration
#%   binfun: 
#%
#% Output
#%   BBstm: basis vectors

nBases = 5
nkbins = 10 #binfun(duration); # number of bins for the basis functions

#ttb = repmat((1:nkbins)', 1, nBases); # time indices for basis
ttb = np.tile(np.arange(0,nkbins),(nBases,1))

#    %   ^
#    %  / \
#    % /   \______
#    %      ^
#    %     / \
#    % ___/   \___
#    %         ^
#    %        / \
#    % ______/   \
#    % For raised cosine, the spacing between the centers must be 1/4 of the
#    % width of the cosine
dbcenter = nkbins / (3 + nBases) # spacing between bumps
width = 4*dbcenter # width of each bump
bcenters = 2*dbcenter + dbcenter*np.arange(0,nBases)
# location of each bump centers
# bcenters = round(bcenters); % round to closest ms <-- BAD!!! NEVER DO THIS
def bfun(x,period):
    return (abs(x/period)<0.5)*(np.cos(x*2*np.pi/period)*.5+.5)
temp = ttb - np.tile(bcenters,(nkbins,1)).T
BBstm = [bfun(xx,width) for xx in temp]  # bfun(ttb-repmat(bcenters,nkbins,1), width);
plt.plot(np.array(BBstm).T)
